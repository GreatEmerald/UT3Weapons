//=============================================================================
// UT3RocketLauncher.uc
// Rocket Scientist.
// 2008, GreatEmerald
//=============================================================================

class UT3RocketLauncher extends RocketLauncher;

var() Sound LockOnSound;
var() Sound LockLostSound;
var() Sound LoadStartSound;
var() Sound LoadEndSound;

function Tick(float dt)
{
    local Pawn Other;
    local Vector StartTrace;
    local Rotator Aim;
    local float BestDist, BestAim;

    if (Instigator == None || Instigator.Weapon != self)
        return;

    if ( Role < ROLE_Authority )
        return;

    if ( !Instigator.IsHumanControlled() )
        return;

    if (Level.TimeSeconds > SeekCheckTime)
    {
        if (bBreakLock)
        {
            bBreakLock = false;
            bLockedOn = false;
            SeekTarget = None;
        }

        StartTrace = Instigator.Location + Instigator.EyePosition();
        Aim = Instigator.GetViewRotation();

        BestAim = LockAim;
        Other = Instigator.Controller.PickTarget(BestAim, BestDist, Vector(Aim), StartTrace, SeekRange);

        if ( CanLockOnTo(Other) )
        {
            if (Other == SeekTarget)
            {
                LockTime += SeekCheckFreq;
                if (!bLockedOn && LockTime >= LockRequiredTime)
                {
                    bLockedOn = true;
                    PlayerController(Instigator.Controller).ClientPlaySound(LockOnSound);
                 }
            }
            else
            {
                SeekTarget = Other;
                LockTime = 0.0;
            }
            UnLockTime = 0.0;
        }
        else
        {
            if (SeekTarget != None)
            {
                UnLockTime += SeekCheckFreq;
                if (UnLockTime >= UnLockRequiredTime)
                {
                    SeekTarget = None;
                    if (bLockedOn)
                    {
                        bLockedOn = false;
                        PlayerController(Instigator.Controller).ClientPlaySound(LockLostSound);
                    }
                }
            }
            else
                 bLockedOn = false;
         }

        SeekCheckTime = Level.TimeSeconds + SeekCheckFreq;
    }
}

function Projectile SpawnProjectile(Vector Start, Rotator Dir)
{
    local RocketProj Rocket;
    local SeekingRocketProj SeekingRocket;
    local bot B;

    bBreakLock = true;

    // decide if bot should be locked on
    B = Bot(Instigator.Controller);
    if ( (B != None) && (B.Skill > 2 + 5 * FRand()) && (FRand() < 0.6) && (B.Target != None)
        && (B.Target == B.Enemy) && (VSize(B.Enemy.Location - B.Pawn.Location) > 2000 + 2000 * FRand())
        && (Level.TimeSeconds - B.LastSeenTime < 0.4) && (Level.TimeSeconds - B.AcquireTime > 1.5) )
    {
        bLockedOn = true;
        SeekTarget = B.Enemy;
    }

    if (bLockedOn && SeekTarget != None)
    {
        SeekingRocket = Spawn(class'UT3SeekingRocketProj',,, Start, Dir);
        SeekingRocket.Seeking = SeekTarget;
        if ( B != None )
        {
            //log("LOCKED");
            bLockedOn = false;
            SeekTarget = None;
        }
        return SeekingRocket;
    }
    else
    {
        Rocket = Spawn(class'UT3RocketProj',,, Start, Dir);
        return Rocket;
    }
}


simulated state AnimateLoad
{
    simulated function Tick(float dt)
    {
        if (bRotateBarrel)
            UpdateBarrel(dt);
    }

Begin:
    Sleep(0.15);
    RotateBarrel();
    Sleep(0.07);
    PlayOwnedSound(LoadStartSound, SLOT_None,,,,,false);
    ClientPlayForceFeedback( "RocketLauncherLoad" );  // jdf
    Sleep(0.28);
    Plunge();
    PlayOwnedSound(LoadEndSound, SLOT_None,,,,,false);
    ClientPlayForceFeedback( "RocketLauncherPlunger" );  // jdf
    Sleep(0.29);
    GotoState('');
}

defaultproperties
{
    ItemName="UT3 Rocket Launcher"
    Description="Each year, more accidental deaths are caused by the Trident Tri-barrel Rocket Launcher than in vehicular accidents and extreme sports combined. The kill radius for its standard dumbfire rocket is surprisingly high by design - so accidentally firing upon a nearby wall, or a nearby enemy soldier, can be quite fatal for the operator. The alternate fire adds to this suicidal lethality by loading and firing up to three rockets at once, in a spread, tight spiral, or lobbed like grenades. Regardless of the grim statistics, veteran soldiers still consider the 'old 8 ball' the most expedient way to put explosive ordnance on target."

    FireModeClass(0)=UT3RocketFire
    FireModeClass(1)=UT3RocketMultiFire
    PickupClass=class'UT3RocketLauncherPickup'
    SelectSound=Sound'UT3Weapons2.RocketLauncher.RocketLauncherTakeOut'
    LockOnSound=Sound'UT3Weapons2.Generic.LockOn'
    LockLostSound=Sound'WeaponSounds.SeekLost'
    LoadStartSound=Sound'UT3Weapons2.RocketLauncher.RocketLauncherLoad1'
    LoadEndSound=Sound'UT3Weapons2.RocketLauncher.RocketLauncherLoad2'
    TransientSoundVolume=0.6
    AIRating=0.78
    CurrentRating=0.780000

    Priority=10
    CustomCrosshairTextureName="UT3HUD.Crosshairs.UT3CrosshairRocketLauncher"
	CustomCrosshairColor=(B=0,G=0,R=255,A=255)
	CustomCrosshairScale=1.2
	HudColor=(B=0,G=0,R=255,A=255)
	IconMaterial=Material'UT3HUD.Icons.UT3IconsScaled'
    IconCoords=(X1=65,Y1=189,X2=130,Y2=214)
}
